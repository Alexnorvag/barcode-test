{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BarcodeWrapper","addNewValue","useState","result","setResult","error","setError","onError","console","log","onScan","data","className","dataList","Array","map","el","index","App","dataNew","setDataNew","useEffect","value","obj","c","pEl","ind","key","cEl","idx","onClick","id","newD","filter","item","deleteHandler","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAKMA,G,MAAiB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACdC,mBAAS,aADK,mBACnCC,EADmC,KAC3BC,EAD2B,OAEhBF,oBAAS,GAFO,mBAEnCG,EAFmC,KAE5BC,EAF4B,KAiB1C,OACE,6BACE,kBAAC,IAAD,CAAeC,QARC,SAAAF,GAClBG,QAAQC,IAAI,gBAAiBJ,GAC7BD,EAAU,uBACVE,GAAS,IAK8BI,OAftB,SAAAC,GACjBH,QAAQC,IAAI,kBAAmBE,GAC/BV,EAAYU,GACZP,EAAUO,GACVL,GAAS,MAYP,yBACEM,UACE,+FACCP,EAAQ,iBAAmB,oBAHhC,0BAMsBF,OAMtBU,EAAW,YAAIC,MAAM,IAAIC,KAAI,SAACC,EAAIC,GAAL,MAAe,CAAC,SAAD,sBAEjCA,GAFiC,oBAGnCA,GAHmC,oBAInCA,OA+EAC,MA5Ef,WAAgB,IAAD,EACiBhB,mBAASW,GAD1B,mBACNM,EADM,KACGC,EADH,KAqBb,OAJAC,qBAAU,WACRb,QAAQC,IAAI,YAAaU,KACxB,CAACA,IAGF,yBAAKP,UAAU,qBACb,6BACE,4BAAQA,UAAU,4EAAlB,uBAGA,4BAAQA,UAAU,+BAAlB,oBAGF,8BACE,6BACE,kBAAC,EAAD,CAAgBX,YAtBA,SAAAqB,GACtB,IAAMC,EAAM,CAAC,SAAUD,EAAO,OAAQ,QACtCd,QAAQC,IAAI,QAASc,GACrBf,QAAQC,IAAI,oBAAqBU,GACjCC,GAAW,SAAAI,GAAC,4BAAQA,GAAR,CAAWD,WAoBnB,yBAAKX,UAAU,iBACb,2BAAOA,UAAU,2DACf,+BACE,4BACE,wBAAIA,UAAU,mBACd,wBAAIA,UAAU,kBAAd,OACA,wBAAIA,UAAU,kBAAd,aACA,wBAAIA,UAAU,kBAAd,eAGJ,+BACGO,EAAQJ,KAAI,SAACU,EAAKC,GAAN,OACX,wBAAIC,IAAKD,GACND,EAAIV,KAAI,SAACa,EAAKC,GAAN,OACP,wBACEF,IAAKE,EACLjB,UACU,IAARiB,GAAqB,IAARA,EAAY,sBAAwB,IAG1C,IAARA,EACC,4BACEjB,UAAU,6BACVkB,QAAS,kBAtDX,SAAAC,GACpBvB,QAAQC,IAAI,aAAcsB,GAC1B,IAAMC,EAAOb,EAAQc,QAAO,SAACC,EAAMjB,GAAP,OAAiBA,IAAUc,GAAMG,KAE7Dd,EAAWY,GAkD0BG,CAAcT,KAE5BE,GAGHA,gBC9FJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.64546672.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport BarcodeReader from \"react-barcode-reader\";\n\nimport \"./style.scss\";\n\nconst BarcodeWrapper = ({ addNewValue }) => {\n  const [result, setResult] = useState(\"No result\");\n  const [error, setError] = useState(true);\n\n  const handleScan = data => {\n    console.log(\"Received data: \", data);\n    addNewValue(data);\n    setResult(data);\n    setError(false);\n  };\n\n  const handleError = error => {\n    console.log(\"FIRED ERROR: \", error);\n    setResult(\"TOO SLOW, TRY AGAIN\");\n    setError(true);\n  };\n\n  return (\n    <div>\n      <BarcodeReader onError={handleError} onScan={handleScan} />\n      <div\n        className={\n          \"uk-margin-medium-top uk-margin-medium-bottom uk-margin-medium-left uk-margin uk-text-large \" +\n          (error ? \"uk-text-danger\" : \"uk-text-success\")\n        }\n      >\n        {`Barcode Output: ${result}`}\n      </div>\n    </div>\n  );\n};\n\nconst dataList = [...Array(1)].map((el, index) => [\n  `delete`,\n  `Scanned_UPC ${index}`,\n  `item_name ${index}`,\n  `completed ${index}`\n]);\n\nfunction App() {\n  const [dataNew, setDataNew] = useState(dataList);\n\n  const deleteHandler = id => {\n    console.log(\"DELETING: \", id);\n    const newD = dataNew.filter((item, index) => index !== id && item);\n\n    setDataNew(newD);\n  };\n\n  const addBarcodeValue = value => {\n    const obj = [\"delete\", value, \"test\", \"test\"];\n    console.log(\"OBJ: \", obj);\n    console.log(\"addBarcodeValue: \", dataNew);\n    setDataNew(c => [...c, obj]);\n  };\n\n  useEffect(() => {\n    console.log(\"dataNew: \", dataNew);\n  }, [dataNew]);\n\n  return (\n    <div className=\"App uk-margin-top\">\n      <nav>\n        <button className=\"uk-button uk-button-default uk-margin-medium-left uk-margin-medium-right\">\n          Create New Manifest\n        </button>\n        <button className=\"uk-button uk-button-default\">Manage Manifest</button>\n      </nav>\n\n      <main>\n        <div>\n          <BarcodeWrapper addNewValue={addBarcodeValue} />\n        </div>\n        <div className=\"table-wrapper\">\n          <table className=\"uk-table uk-table-small uk-table-divider uk-table-hover\">\n            <thead>\n              <tr>\n                <th className=\"uk-width-small\"></th>\n                <th className=\"uk-width-small\">UPC</th>\n                <th className=\"uk-width-small\">Item Name</th>\n                <th className=\"uk-width-small\">Completed</th>\n              </tr>\n            </thead>\n            <tbody>\n              {dataNew.map((pEl, ind) => (\n                <tr key={ind}>\n                  {pEl.map((cEl, idx) => (\n                    <td\n                      key={idx}\n                      className={\n                        idx === 1 || idx === 2 ? \"uk-divider-vertical\" : \"\"\n                      }\n                    >\n                      {idx === 0 ? (\n                        <button\n                          className=\"uk-button uk-button-danger\"\n                          onClick={() => deleteHandler(ind)}\n                        >\n                          {cEl}\n                        </button>\n                      ) : (\n                        cEl\n                      )}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}